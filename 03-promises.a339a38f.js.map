{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,WAAYF,SAASC,cAAc,gBACnCE,UAAWH,SAASC,cAAc,eAClCG,YAAaJ,SAASC,cAAc,kBAyBtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA/BbT,EAAKC,OAAOe,iBAAiB,UAE7B,SAAkBC,GAChBA,EAAIC,iBACJ,MAAMC,EAAaC,OAAOpB,EAAKI,WAAWiB,OACpCC,EAAYF,OAAOpB,EAAKK,UAAUgB,OAClCE,EAASH,OAAOpB,EAAKM,YAAYe,QAKzC,SAAwBF,EAAYG,EAAWC,GAC7C,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAInCjB,EAFeiB,EADDL,GAAcK,EAAI,GAAKF,GAIwBG,MAAvD,EAACjB,SAACA,EAAQC,MAAEA,KAAYiB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqBpB,QAAiBC,SAAYoB,OACrG,EAAKrB,WAASC,WAAciB,EAAA5B,GAAQ6B,OAACG,QAAO,sBAAStB,QAA8BC,Q,EAVxFsB,CAAeZ,EAAYG,EAAWC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayInput: document.querySelector('[name=delay]'),\n  stepInput: document.querySelector('[name=step]'),\n  amountInput: document.querySelector('[name=amount]'),\n};\n\nrefs.formEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  const firstDelay = Number(refs.delayInput.value); //1000\n  const delayStep = Number(refs.stepInput.value); //500\n  const amount = Number(refs.amountInput.value); //5\n\n  createPromises(firstDelay, delayStep, amount);\n}\n\nfunction createPromises(firstDelay, delayStep, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    const delay = firstDelay + (i - 1) * delayStep; //получаем на первой итерации 1000: i - 1 = 0, 0 * 500 = 0, firstDelay(1000) + 0 = 1000\n    let position = i;\n\n    createPromise(position, delay) //вызываем функцию и передаем туда позицию и задержку на каждой итерации\n    .then(({position, delay }) => Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n    .catch(({position, delay }) => Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)) \n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({position, delay }); //\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","delayInput","stepInput","amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","firstDelay","Number","value","delayStep","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$createPromises"],"version":3,"file":"03-promises.a339a38f.js.map"}